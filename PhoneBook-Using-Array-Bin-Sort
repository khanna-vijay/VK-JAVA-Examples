package pg.module.two.assignment.binsort;

//Using Array for Bin Sort..

class idRecord {
	String name;
	long number;
	int ID;

	public idRecord(String newName, long newNumber, int newID) {
		this.name = newName;
		this.number = newNumber;
		this.ID = newID;

	}

	public String getName() {
		return this.name;
	}

	public long getNumber() {
		return this.number;
	}

	public int getID() {
		return this.ID;

	}
}

class AddressBook {
	idRecord[] list;

	public AddressBook() {
		// list = new LinkedList<Record>();
		list = new idRecord[1000];

		// declare 'list' as an array in the constructor, remember to declare a big
		// enough array to store all possible IDs
	}

	public void add(String newName, long newNumber, int newID) {

		// System.out.println("Adding : newName :" + newName + " newNumber: " +
		// newNumber + " newID : " + newID);
		// idRecord item = new idRecord();
		// item.name = newName;
		// item.number = newNumber;
		// item.ID = newID;
		list[newID] = new idRecord(newName, newNumber, newID);
		// System.out.println(list[newID].name);
//
		// list[newID].number = newNumber;
		// list[newID].ID = newID;

		// Wrap all the details into an object of class Record and add it to the list at
		// the correct index

		// Print: 'Successfully added: contact_name', where contact_name is the name of
		// the contact added
		System.out.println("Successfully added: " + newName);
	}

	public void findByID(int ID) {
		// Check if the ID exists
		// If it doesn't, print: 'No such ID exists'
		// else Print: 'Name: contact_name Number: contact_number', where contact_name
		// and contact_number are the details of the contact having that ID
		String contact = "";
		boolean idFound = false;
		for (idRecord r : list)
			if (r != null) {
				if (ID == r.getID()) {
					System.out.println("Name: " + r.getName() + " Number: " + r.getNumber());

					idFound = true;
				}
			}

		if (idFound == false)
			System.out.println("No such ID exists");
	}

	public void delete(int ID) {
		// Check if the ID exists
		// If it doesn't, print: 'No such ID exists'
		// else delete the item in the list having the given ID
		// Print: 'Successfully deleted: contact_name', where contact_name is the name
		// of the contact to be deleted
		String contact = "";
		boolean idDeleted = false;
		for (idRecord r : list)
			if (r != null) {
				if (ID == r.getID()) {
					contact = r.getName();
					list[ID] = null;
					System.out.println("Successfully deleted: " + contact);
					idDeleted = true;
				}
			}

		if (idDeleted == false)
			System.out.println("No such ID exists");

	}

	public void printAddressBook() {
		System.out.println("List of contacts:");

		for (idRecord r : list)
			if (r != null)
				System.out.println("Name: " + r.getName() + " ID: " + r.getID() + " Number: " + r.getNumber());

		// Print the details of all the contacts in the list in the following format:
		// Name: ABC ID: 876 Number: 123456789
		// Note that the above is just an example

	}
}

public class Source {

	public static void main(String[] args) {
		AddressBook myContacts = new AddressBook();

		// myContacts.printAddressBook(); // Additional; to Delete

		myContacts.add("John", 9876123450l, 101);
		myContacts.add("Mellisa", 8360789114l, 560);
		myContacts.add("Daman", 9494149900l, 444);
		myContacts.findByID(999);
		myContacts.printAddressBook();
		myContacts.delete(101);
		myContacts.add("Gregory", 7289880988l, 980);
		myContacts.printAddressBook();
		myContacts.findByID(560);
		myContacts.add("Mary", 7205678901l, 670);
		myContacts.delete(101);
		myContacts.findByID(670);
		myContacts.printAddressBook();
	}
}
